import express, { Application } from 'express';
import { ApolloServer } from 'apollo-server-express';
import { gql } from 'graphql-tag'; // Import gql from graphql-tag
import path from 'node:path';
import db from './config/connection.js';
import routes from './routes/index.js';

const app: Application = express(); // Ensure `app` is typed correctly as `Application`
const PORT = process.env.PORT || 3001;

// Define your typeDefs (GraphQL Schema)
const typeDefs = gql`
  type Query {
    hello: String
  }
`;

// Define your resolvers (Functions for handling GraphQL queries)
const resolvers = {
  Query: {
    hello: () => 'Hello, World!',
  },
};

// Create Apollo Server
const server = new ApolloServer({
  typeDefs,
  resolvers,
});

// Apply Apollo middleware to your Express app
server.applyMiddleware({ app }); // Make sure `app` is correctly typed as `express.Application`

// Middleware for Express
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// if we're in production, serve client/build as static assets
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '../client/build')));
}

app.use(routes);

// Start the Express server and connect to the database
db.once('open', () => {
  app.listen(PORT, () => {
    console.log(`🌍 Now listening on localhost:${PORT}`);
    console.log(`🚀 GraphQL endpoint ready at http://localhost:${PORT}${server.graphqlPath}`);
  });
});
